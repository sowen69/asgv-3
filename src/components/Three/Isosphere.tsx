/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';
import { Mesh } from 'three';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: { Icosphere: THREE.Mesh };
  materials: {
    ['Letherd dots']: THREE.MeshStandardMaterial;
  };
};

export default function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/asgv-3/icosphere.glb') as GLTFResult;

  const mesh = useRef<Mesh | null>(null);

  useFrame(({ clock }) => {
    const a = clock.getElapsedTime();

    if (mesh.current) {
      mesh.current.rotation.z = a;
      // mesh.current.rotation.y = a / 2;
    }
  });
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Icosphere.geometry}
        material={materials['Letherd dots']}
        position={[0, 1, 0]}
        scale={1.59}
        ref={mesh}
      />
    </group>
  );
}

useGLTF.preload('/asgv-3/icosphere.glb');
